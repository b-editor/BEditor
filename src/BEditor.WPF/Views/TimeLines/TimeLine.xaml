<UserControl x:Class="BEditor.Views.TimeLines.TimeLine"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:BEditor.Views.TimeLines"
             xmlns:convert="clr-namespace:BEditor.ViewModels"
             xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:properties="clr-namespace:BEditor.Core.Properties;assembly=BEditor.Core"
             TextElement.Foreground="{DynamicResource MaterialDesignBody}"
             mc:Ignorable="d">
    <UserControl.Resources>
        <Style x:Key="TimelineHideShowToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="{DynamicResource MaterialDesignBodyLight}" />
            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid ClipToBounds="True" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition From="*" To="Checked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                    <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                    <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                    <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                    <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                        <VisualTransition From="Checked" To="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                    <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                    <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                    <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                    <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                            <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                            <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle Fill="Transparent" x:Name="HoverEllipse" Stroke="Transparent" StrokeThickness="1" />
                            <Rectangle Fill="{TemplateBinding Background}" x:Name="CheckedEllipse" RenderTransformOrigin="0.5, 0.5">
                                <Rectangle.RenderTransform>
                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" x:Name="CheckedEllipseScale"/>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="HoverEllipse" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                            </Trigger>
                            <!-- TODO
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="BorderBrush" TargetName="normal" Value="{Binding (Custom:ControlsHelper.FocusBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>
            <ColumnDefinition Width="1173*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="32"/>
            <RowDefinition Height="413*"/>
        </Grid.RowDefinitions>

        <ScrollViewer Style="{StaticResource MaterialDesignScrollViewerStyle}" x:Name="ScrollLine" Grid.Row="0" Grid.Column="1" PreviewMouseWheel="ScrollLine_PreviewMouseWheel" HorizontalScrollBarVisibility="Visible" Background="{DynamicResource MaterialDesignCardBackground}" Grid.RowSpan="2" ScrollChanged="ScrollLine_ScrollChanged">
            <Grid Width="{Binding TrackWidth.Value, Mode=OneWay}" Height="Auto" Background="{DynamicResource MaterialDesignBodyLight}" HorizontalAlignment="Left" x:Name="timelinegrid">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseMove">
                        <i:InvokeCommandAction Command="{Binding TimeLineMouseMoveCommand, Mode=OneTime}" PassEventArgsToCommand="True" EventArgsConverterParameter="{Binding RelativeSource={RelativeSource AncestorType=Grid}}" EventArgsConverter="{x:Static convert:MousePositionConverter.Converter}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeftButtonUp">
                        <i:InvokeCommandAction Command="{Binding TimeLineMouseLeftUpCommand, Mode=OneTime}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding TimeLineMouseLeftDownCommand, Mode=OneTime}" PassEventArgsToCommand="True" EventArgsConverterParameter="{Binding RelativeSource={RelativeSource AncestorType=Grid}}" EventArgsConverter="{x:Static convert:MousePositionConverter.Converter}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeave">
                        <i:InvokeCommandAction Command="{Binding TimeLineMouseLeaveCommand, Mode=OneTime}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

                <VirtualizingStackPanel
                    x:Name="Layer"
                    Cursor="{Binding LayerCursor.Value, Mode=OneWay}"
                    Width="{Binding TrackWidth.Value, Mode=OneWay}"
                    HorizontalAlignment="Left"
                    VirtualizingPanel.IsVirtualizing="True"
                    VirtualizingPanel.VirtualizationMode="Recycling">
                    <VirtualizingStackPanel.ContextMenu>
                        <ContextMenu Margin="0,0,0,0" x:Name="TimelineMenu">
                            <MenuItem>
                                <MenuItem.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="200"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <VirtualizingStackPanel Orientation="Horizontal">
                                            <md:PackIcon Kind="ContentCut" Margin="5,0,5,0"/>
                                            <TextBlock Text="{x:Static properties:Resources.Cut}" Margin="20,0,5,0"/>
                                        </VirtualizingStackPanel>
                                        <TextBlock Text="Ctrl+X" Grid.Column="1"/>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem>
                                <MenuItem.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="200"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <VirtualizingStackPanel Orientation="Horizontal">
                                            <md:PackIcon Kind="ContentCopy" Margin="5,0,5,0"/>
                                            <TextBlock Text="{x:Static properties:Resources.Copy}" Margin="20,0,5,0"/>
                                        </VirtualizingStackPanel>
                                        <TextBlock Text="Ctrl+C" Grid.Column="1"/>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem Command="{Binding PasteCommand, Mode=OneTime}">
                                <MenuItem.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="200"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <VirtualizingStackPanel Orientation="Horizontal">
                                            <md:PackIcon Kind="ContentPaste" Margin="5,0,5,0"/>
                                            <TextBlock Text="{x:Static properties:Resources.Paste}" Margin="20,0,5,0"/>
                                        </VirtualizingStackPanel>
                                        <TextBlock Text="Ctrl+V" Grid.Column="1"/>
                                    </Grid>
                                </MenuItem.Header>
                            </MenuItem>
                            <Separator/>
                            <MenuItem Command="{Binding SettingShowCommand, Mode=OneTime}">
                                <MenuItem.Header>
                                    <VirtualizingStackPanel Orientation="Horizontal">
                                        <md:PackIcon Kind="Settings" Margin="5,0,5,0"/>
                                        <TextBlock Text="{x:Static properties:Resources.Settings}" Margin="20,0,5,0"/>
                                    </VirtualizingStackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                        </ContextMenu>
                    </VirtualizingStackPanel.ContextMenu>
                    <Grid x:Name="scale" Background="{DynamicResource MaterialDesignCardBackground}" HorizontalAlignment="Left" Height="32" Width="{Binding TrackWidth.Value, Mode=OneWay}"/>
                </VirtualizingStackPanel>
                <Border Background="Red" Width="1.25" HorizontalAlignment="Left" Margin="{Binding SeekbarMargin.Value, Mode=OneWay}"/>
            </Grid>
        </ScrollViewer>
        <ScrollViewer x:Name="ScrollLabel" Grid.Row="1" VerticalScrollBarVisibility="Hidden" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
            <VirtualizingStackPanel x:Name="LayerLabel" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Recycling"/>
        </ScrollViewer>
    </Grid>
</UserControl>
