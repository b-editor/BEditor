@using BEditor.Core.Data
@using BEditor.Core.Data.Property
@using BEditor.Core.Data.Primitive.Properties
@using BEditor.Core.Data.Primitive.Components
@code
{
    static PropertyViewBuilder()
    {
        #region CreatePropertyView
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(CheckProperty),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(ColorAnimationProperty),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(ColorProperty),
            CreateFunc = (property) =>@<ColorPropertyView Property="(ColorProperty)property"></ColorPropertyView>
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(DocumentProperty),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(EaseProperty),
            CreateFunc = (property) =>@<EasePropertyView Property="(EaseProperty)property"></EasePropertyView>
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(DialogProperty),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(ExpandGroup),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(FileProperty),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(FontProperty),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(Group),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(SelectorProperty),
            CreateFunc = (property) => @<SelectorPropertyView Property="(SelectorProperty)property"></SelectorPropertyView>
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(ValueProperty),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(TextProperty),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(ButtonComponent),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(FolderProperty),
        });
        PropertyViewBuilders.Add(new()
        {
            PropertyType = typeof(LabelComponent),
        });
        #endregion
    }

    public static List<Builder> PropertyViewBuilders { get; } = new();

    public static RenderFragment CreateProperty(PropertyElement property)
    {
        var type = property.GetType();
        return PropertyViewBuilders.Find(x => type == x.PropertyType || type.IsSubclassOf(x.PropertyType)).CreateFunc(property);
    }

    public class Builder
    {
        public Type PropertyType { get; set; }
        public Func<PropertyElement, RenderFragment> CreateFunc { get; set; } = (property) => @<div style="height: 32.5px;">Nothing</div>;
}
}